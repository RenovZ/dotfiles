set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
# set cursorpreviewfmt "\033[7;2m"

# set previewer ~/.config/lf/kitty_previewer
# set cleaner ~/.config/lf/kitty_cleaner
# set previewer ~/.config/lf/preview
# set cleaner ~/.config/lf/cleaner

# set previewer stpv
# set cleaner stpvimgclr
# &stpvimg --listen $id
# cmd on-quit $stpvimg --end $id

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

set ratios 1:2:3
set icons true
set colors true

# # zoxide
# cmd z %{{
#     result="$(zoxide query --exclude "${PWD}" -- "$1")"
#     lf -remote "send ${id} cd '${result}'"
# }}

# cmd zi ${{
#     result="$(zoxide query -i -- "$1")"
#     lf -remote "send ${id} cd '${result}'"
# }}

# # exa
cmd on-select &{{
    lf -remote "send $id set statfmt \"$(exa -ld --color=always "$f")\""
}}

# git
cmd git_add ${{clear;git-forgit add}}
cmd git_push ${{
    clear
    current_branch=$(git branch --show-current)
    selected=$(git branch -rv|fzf --header="$current_branch (current branch)
$(git --no-pager remote -v|awk '{print $1 " " $2}'|sort|uniq)" \
    --preview="echo {}|awk '{print \$2}'|xargs git show")
    remote=$(echo $selected|awk -F / '{print $1}')
    target_branch=$(echo $selected|awk '{print $1}'|awk -F / '{print $2}')
    if [ ! -z $remote ]; then
        echo "git push $remote $current_branch:$target_branch"
        git push $remote $current_branch:$target_branch
        echo "press ENTER"
        read ENTER
    fi
}}
cmd git_diff ${{clear;git-forgit diff}}
cmd git_pull ${{
    clear
    # remote=$(git --no-pager remote -v | fzf | awk '{print $1}')
    # branch=$(git --no-pager branch -vv | fzf | sed "s/^* //" | awk '{print $1}')
    current_branch=$(git branch --show-current)
    selected=$(git branch -rv|fzf --header="$current_branch (current branch)
$(git --no-pager remote -v|awk '{print $1 " " $2}'|sort|uniq)" \
    --preview="echo {}|awk '{print \$2}'|xargs git show")
    remote=$(echo $selected|awk '{print $1}'|awk -F / '{print $1}')
    branch=$(echo $selected|awk '{print $1}'|awk -F / '{print $2}')
    if [ ! -z $remote ]; then
        echo "git pull $remote $branch"
        git pull $remote $branch
        echo "press ENTER"
        read ENTER
    fi
}}
cmd git_status ${{clear; git status; echo "press ENTER"; read ENTER}}
cmd git_reset_head ${{clear;git-forgit reset_head}}
cmd git_log ${{clear;git-forgit log}}
cmd git_remote ${{clear; git remote -v; echo "press ENTER"; read ENTER}}
cmd git_checkout_branch ${{clear;git-forgit checkout_branch}}
cmd git_branch_delete ${{clear;git-forgit branch_delete}}
cmd git_checkout_tag ${{clear;git-forgit checkout_tag}}
cmd git_checkout_commit ${{clear;git-forgit checkout_commit}}
cmd git_checkout_file ${{clear;git-forgit checkout_file}}
cmd git_blame ${{clear;git-forgit blame}}
cmd git_stash_show ${{clear;git-forgit stash_show}}
cmd git_commit ${{
    clear
    git commit "$@"
}}
cmd git_fixup ${{clear;git-forgit fixup}}
cmd git_cherry_pick ${{clear;git-forgit cherry_pick}}
cmd git_ignore ${{clear;git-forgit ignore}}

map ga :git_add
map gp :git_push
map gd :git_diff
map gu :git_pull
map gl :git_log
map ge push %git<space>
map gi :git_ignore
map gce :git_commit
map gbd :git_branch_delete
map gcb :git_checkout_branch
map gct :git_checkout_tag
map gcc :git_checkout_commit
map gcp :git_cherry_pick
map gcf :git_checkout_file
map gbl :git_blame
map gst :git_status
map gss :git_stash_show
map gfu :git_fixup
map grv :git_remote
map grh :git_reset_head

# fzf
cmd fzf $vi $(find . -name "$1" | fzf)
cmd fzf_jump ${{
    res="$(fd --type d \
        --hidden \
        --no-ignore \
        --exclude '.git' \
        --ignore-case \
        | fzf --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
cmd rg_search ${{
    res="$( \
        RG_PREFIX="rg --column \
            --hidden \
            --line-number \
            --no-heading \
            --no-ignore \
            --glob '!.git/*' \
            --color=always \
            --smart-case "
        preview="
            filepath=\$(echo {}|awk -F ':' '{print \$1}')
            currentline=\$(echo {}|awk -F : '{print \$2}')
            startline=\$([ \$currentline -ge 20 ] && expr \$currentline - 20 || expr 0)
            # endline=\$(expr \$currentline + 10)
            # bat -n --line-range \$startline:\$endline --highlight-line \$currentline --color always \$filepath
            bat -n --line-range \$startline: --highlight-line \$currentline --color always \$filepath
        "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --header 'Search in files' \
            --preview "$preview" \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
cmd fd_search ${{
    res="$( \
        FD_PREFIX="fd --color=always \
            --type f \
            --exclude '.git' \
            --ignore-case "
        preview="bat --color=always --style=numbers {}"
        FZF_DEFAULT_COMMAND="$FD_PREFIX ''" \
            fzf --bind "change:reload:$FD_PREFIX {q} || true" \
            --ansi --header 'Search in files' \
            --preview "$preview" \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
cmd fdh_search ${{
    res="$( \
        FD_PREFIX="fd --color=always \
            --hidden \
            --type f \
            --exclude '.git' \
            --ignore-case "
        preview="bat --color=always --style=numbers {}"
        FZF_DEFAULT_COMMAND="$FD_PREFIX ''" \
            fzf --bind "change:reload:$FD_PREFIX {q} || true" \
            --ansi --header 'Search in files' \
            --preview "$preview" \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
cmd fdi_search ${{
    res="$( \
        FD_PREFIX="fd --color=always \
            --no-ignore \
            --type f \
            --exclude '.git' \
            --ignore-case "
        preview="bat --color=always --style=numbers {}"
        FZF_DEFAULT_COMMAND="$FD_PREFIX ''" \
            fzf --bind "change:reload:$FD_PREFIX {q} || true" \
            --ansi --header 'Search in files' \
            --preview "$preview" \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
cmd fda_search ${{
    res="$( \
        FD_PREFIX="fd --color=always \
            --hidden \
            --no-ignore \
            --type f \
            --exclude '.git' \
            --ignore-case "
        preview="bat --color=always --style=numbers {}"
        FZF_DEFAULT_COMMAND="$FD_PREFIX ''" \
            fzf --bind "change:reload:$FD_PREFIX {q} || true" \
            --ansi --header 'Search in files' \
            --preview "$preview" \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
cmd fzf_raw ${{
    # preview="bat --color=always --style=numbers --line-range=:500 {}"
    fzf
}}

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}

map f
map fg :fzf_search
map fj :fzf_jump
map fs :rg_search
map fd :fd_search
map fh :fdh_search
map fi :fdi_search
map fa :fda_search
map fe $vi $(fzf)
map ff :fzf_raw

map . set hidden!

#create new directory or file
map o
cmd mkdir %mkdir "$@"
map od push %mkdir<space>
cmd touch %touch "$@"
map of push %touch<space>

#delete file or directories
map x
map x push :delete<enter>

map i $~/.config/lf/preview $f | less -R
