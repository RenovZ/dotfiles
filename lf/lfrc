# set previewer ~/.config/lf/kitty_previewer
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/kitty_cleaner
set ratios 1:2:3

set icons true

# # zoxide
# cmd z %{{
#     result="$(zoxide query --exclude "${PWD}" -- "$1")"
#     lf -remote "send ${id} cd '${result}'"
# }}

# cmd zi ${{
#     result="$(zoxide query -i -- "$1")"
#     lf -remote "send ${id} cd '${result}'"
# }}

# git
cmd git_add ${{clear;git-forgit add}}
cmd git_push ${{
    clear
    remote=$(git --no-pager remote -v | fzf | awk '{print $1}')
    target_branch=$(git --no-pager branch -vv | fzf | sed "s/^* //" | awk '{print $1}')
    current_branch=$(git branch --show-current)
    git push $remote $current_branch:$target_branch
    echo "press ENTER"
    read ENTER
}}
cmd git_diff ${{clear;git-forgit diff}}
cmd git_pull ${{
    clear
    remote=$(git --no-pager remote -v | fzf | awk '{print $1}')
    branch=$(git --no-pager branch -vv | fzf | sed "s/^* //" | awk '{print $1}')
    git pull $remote $branch
    echo "press ENTER"
    read ENTER
}}
cmd git_status ${{clear; git status; echo "press ENTER"; read ENTER}}
cmd git_reset_head ${{clear;git-forgit reset_head}}
cmd git_log ${{clear;git-forgit log}}
cmd git_remote ${{clear; git remote -v; echo "press ENTER"; read ENTER}}
cmd git_checkout_branch ${{clear;git-forgit checkout_branch}}
cmd git_branch_delete ${{clear;git-forgit branch_delete}}
cmd git_checkout_tag ${{clear;git-forgit checkout_tag}}
cmd git_checkout_commit ${{clear;git-forgit checkout_commit}}
cmd git_checkout_file ${{clear;git-forgit checkout_file}}
cmd git_blame ${{clear;git-forgit blame}}
cmd git_stash_show ${{clear;git-forgit stash_show}}
cmd git_commit ${{
    clear
    git commit "$@"
}}
cmd git_fixup ${{clear;git-forgit fixup}}
cmd git_cherry_pick ${{clear;git-forgit cherry_pick}}
cmd git_ignore ${{clear;git-forgit ignore}}

map ga :git_add
map gp :git_push
map gd :git_diff
map gu :git_pull
map gl :git_log
map ge push %git<space>
map gi :git_ignore
map gce :git_commit
map gbd :git_branch_delete
map gcb :git_checkout_branch
map gct :git_checkout_tag
map gcc :git_checkout_commit
map gcp :git_cherry_pick
map gcf :git_checkout_file
map gbl :git_blame
map gst :git_status
map gss :git_stash_show
map gfu :git_fixup
map grv :git_remote
map grh :git_reset_head

# fzf
cmd fzf $vi $(find . -name "$1" | fzf)
cmd fzf_jump ${{
    res="$(fd -t d | fzf --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
cmd rg_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
cmd fd_search ${{
    res="$( \
        RG_PREFIX="fd --color=always -t f \
            --ignore-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --header 'Search in files' \
            --preview "bat --color=always --style=numbers {}" \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
cmd fzf_raw ${{
    # preview="bat --color=always --style=numbers --line-range=:500 {}"
    fzf
}}

map f
map fj :fzf_jump
map fs :rg_search
map fd :fd_search
map fe $vi $(fzf)
map fzf :fzf_raw

map . set hidden!

#create new directory or file
map n
cmd mkdir %mkdir "$@"
map nd push %mkdir<space>
cmd touch %touch "$@"
map nf push %touch<space>

#delete file or directories
map x
map x push :delete<enter>
